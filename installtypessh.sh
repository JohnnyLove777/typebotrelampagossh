#!/bin/bash

# Fun√ß√£o para solicitar informa√ß√µes ao usu√°rio e armazen√°-las em vari√°veis
function solicitar_informacoes {
    # Loop para solicitar e verificar o dom√≠nio
    while true; do
        read -p "Digite o dom√≠nio (por exemplo, johnny.com.br): " DOMINIO
        if [[ $DOMINIO =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            break
        else
            echo "Por favor, insira um dom√≠nio v√°lido no formato, por exemplo 'johnny.com.br'."
        fi
    done    

    # Loop para solicitar e verificar o e-mail do Gmail
    while true; do
        read -p "Digite o e-mail do Gmail para cadastro do Typebot (sem espa√ßos): " EMAIL_GMAIL
        if [[ $EMAIL_GMAIL =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            break
        else
            echo "Por favor, insira um endere√ßo de e-mail v√°lido sem espa√ßos."
        fi
    done

    # Loop para solicitar e verificar a senha de app do Gmail
    while true; do
        read -p "Digite a senha de app do Gmail (sem espa√ßos, exatamente 16 caracteres): " SENHA_APP_GMAIL
        if [[ ! $SENHA_APP_GMAIL =~ [[:space:]] && ${#SENHA_APP_GMAIL} -eq 16 ]]; then
            break
        else
            echo "A senha de app deve ter exatamente 16 caracteres e n√£o pode conter espa√ßos."
        fi
    done

    # Armazena as informa√ß√µes inseridas pelo usu√°rio nas vari√°veis globais
    EMAIL_GMAIL_INPUT=$EMAIL_GMAIL
    SENHA_APP_GMAIL_INPUT=$SENHA_APP_GMAIL
    DOMINIO_INPUT=$DOMINIO
}

# Fun√ß√£o para tentar obter o certificado SSL com retries
function certbot_retry {
    local retries=5
    local count=0
    while ((count < retries)); do
        echo "Tentando obter certificado SSL..."
        sudo certbot --nginx --email "$EMAIL_GMAIL_INPUT" --redirect --agree-tos \
                     -d "typebot.$DOMINIO_INPUT" -d "bot.$DOMINIO_INPUT" -d "storage.$DOMINIO_INPUT"
        if [ $? -eq 0 ]; then
            echo "‚úÖ Certificado SSL obtido com sucesso!"
            return 0
        fi
        echo "‚ö†Ô∏è Certbot falhou. Tentando novamente... ($((count+1)) de $retries)"
        ((count++))
        sleep 5
    done
    echo "‚ùå Certbot falhou ap√≥s $retries tentativas. Verifique se o Certbot est√° em uso ou se h√° problemas de configura√ß√£o."
    exit 1
}

# Fun√ß√£o para instalar o Typebot de acordo com os comandos fornecidos
function instalar_typebot {
    # Atualiza e instala depend√™ncias necess√°rias
    sudo apt update && sudo apt upgrade -y
    sudo apt install -y software-properties-common apt-transport-https ca-certificates curl \
                        python3-certbot-nginx nodejs npm git nginx docker.io docker-compose

    # Adiciona usu√°rio ao grupo Docker
    sudo usermod -aG docker ${USER}

    # Solicita informa√ß√µes ao usu√°rio
    solicitar_informacoes

    # Cria√ß√£o dos arquivos de configura√ß√£o do NGINX
    for app in typebot viewbot minio; do
        port=""

        case $app in
            typebot) port=3001 ;;
            viewbot) port=3002 ;;
            minio) port=9000 ;;
        esac

        cat <<EOF | sudo tee /etc/nginx/sites-available/$app > /dev/null
server {
    server_name ${app}.$DOMINIO_INPUT;
    location / {
        proxy_pass http://127.0.0.1:$port;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF
        sudo ln -sf /etc/nginx/sites-available/$app /etc/nginx/sites-enabled/
    done

    # Reinicia o NGINX para aplicar configura√ß√µes
    sudo systemctl restart nginx

    # Chama a fun√ß√£o de retry para o Certbot
    certbot_retry

    # Gera uma chave secreta para criptografia
    ENCRYPTION_SECRET=$(openssl rand -hex 16)

    # Cria√ß√£o do arquivo docker-compose.yml com base nas informa√ß√µes fornecidas
    cat <<EOF > docker-compose.yml
version: '3.3'
services:
  typebot-db:
    image: postgres:13
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=typebot
      - POSTGRES_PASSWORD=typebot

  typebot-builder:
    image: baptistearno/typebot-builder:latest
    restart: always
    ports:
      - 3001:3000
    depends_on:
      - typebot-db
    environment: 
      - DATABASE_URL=postgresql://postgres:typebot@typebot-db:5432/typebot
      - NEXTAUTH_URL=https://typebot.$DOMINIO_INPUT
      - NEXT_PUBLIC_VIEWER_URL=https://bot.$DOMINIO_INPUT
      - ENCRYPTION_SECRET=$ENCRYPTION_SECRET
      - ADMIN_EMAIL=$EMAIL_GMAIL_INPUT
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=465
      - SMTP_USERNAME=$EMAIL_GMAIL_INPUT
      - SMTP_PASSWORD=$SENHA_APP_GMAIL_INPUT
      - SMTP_SECURE=true
      - NEXT_PUBLIC_SMTP_FROM="Suporte Typebot <$EMAIL_GMAIL_INPUT>"
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - S3_BUCKET=typebot
      - S3_ENDPOINT=https://storage.$DOMINIO_INPUT

  typebot-viewer:
    image: baptistearno/typebot-viewer:latest
    restart: always
    ports:
      - 3002:3000
    environment:
      - DATABASE_URL=postgresql://postgres:typebot@typebot-db:5432/typebot
      - NEXT_PUBLIC_VIEWER_URL=https://bot.$DOMINIO_INPUT
      - NEXTAUTH_URL=https://typebot.$DOMINIO_INPUT
      - ENCRYPTION_SECRET=$ENCRYPTION_SECRET
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123
      - S3_BUCKET=typebot
      - S3_ENDPOINT=https://storage.$DOMINIO_INPUT

  minio:
    image: minio/minio
    command: server /data
    restart: always
    ports:
      - 9000:9000
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - s3_data:/data
volumes:
  db_data:
  s3_data:
EOF

    # Inicia os cont√™ineres com docker-compose
    docker-compose up -d

    # Etapa 2: Verificar a exist√™ncia do schema.prisma
    SCHEMA_PATH="/app/packages/prisma/postgresql/schema.prisma"
    CONTAINER_NAME="typebotrelampagossh_typebot-builder_1"

    echo "üîç Verificando a exist√™ncia do schema.prisma no cont√™iner '$CONTAINER_NAME'..."
    docker exec -it "$CONTAINER_NAME" sh -c "test -f $SCHEMA_PATH"
    if [ $? -ne 0 ]; then
      echo "‚ùå O arquivo schema.prisma n√£o foi encontrado no caminho esperado: $SCHEMA_PATH"
      exit 1
    fi
    echo "‚úÖ schema.prisma encontrado!"

    # Etapa 3: Executar migra√ß√µes do Prisma
    echo "üì¶ Executando migra√ß√µes do Prisma no cont√™iner '$CONTAINER_NAME'..."
    docker exec -it "$CONTAINER_NAME" npx prisma migrate deploy --schema "$SCHEMA_PATH"
    if [ $? -ne 0 ]; then
      echo "‚ùå Falha ao aplicar migra√ß√µes. Verifique a configura√ß√£o e o caminho do schema."
      exit 1
    fi
    echo "‚úÖ Migra√ß√µes aplicadas com sucesso!"

    # Etapa 4: Confirmar status dos cont√™ineres
    echo "üîÑ Verificando o status dos cont√™ineres..."
    docker-compose ps

    # Etapa 5: Checar logs para garantir que n√£o h√° erros
    echo "üìÑ Checando logs do builder para garantir que tudo esteja funcionando corretamente..."
    docker logs "$CONTAINER_NAME" | tail -n 20

    echo "üéâ Typebot configurado com sucesso e migra√ß√µes aplicadas! Sistema pronto para uso."
}

# Chamada das fun√ß√µes
instalar_typebot
